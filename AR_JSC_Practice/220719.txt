414p 형식 매개변수 제약시키기

Main -> StructArrat<T> where T : struct (T는 값 형식)의 구조체 할당.
T[] Array는 get/set가능하며 Main에서 <int>(3)을 입력하여 StructArraty(int size)메소드를 이용해
Array = new T[size] 만큼 할당한다. 그럼 a.Array는 int[3]만큼 할당/초기화 된 뒤,
a.Array[0]~[2] = int타입 값을 넣어 index 요소에 접근하여 값을 넣는다.

마찬가지로 RefArray<StructArrat<double>> b 역시
<double>(3)값을 입력하여 이번엔 RefArrat<T> where T : class 구조체를 할당한 뒤,
RefArrat(int size)메소드를 이용해 Arrat = new T[size] 만큼 값을 할당한다.
a.Array와 다르게, b.Array[0]~[2]까지 = new StructArray<double>(값) 으로 할당했기 때문에,
b.Array[0]의 요소안에는 다시 double[5]로 할당했기 때문에 5 size(0~4배열)이 할당/초기화 된다.
**왜냐하면 RefArray<T> where T : class , 즉 class를 상속받았기 때문. 

BaseArray<Base> c = new BaseArray<Base>(3)할당 후,
BaseArray<U> where U : Base 이건 Base기반 클래스를 상속받아 U에 전달하는 구조로 되어 있으며
c.Array[0],[1]은 각각 Base, Derived 를 할당, [2]는 CreateInstance<Base>메소드를 이용해 Base를 할당한다.
이때 T CreateInstance<T>() where T :new() 메소드에서 where T :new() 는 T는 매개변수가 없는 생성자가 있어야 한다는 조건이 있다. 

마지막 BaseArray<Derived> e= new BaseArray<Derived>(3);에서 똑같이 할당 후,
e.CopyArray<Derived>(d.Array); 는 CopyArray<T>(T[] Source) where T:U 메소드에서 
T는 또 다른 형식 매개변수 U로부터 상속받은 클래스여야 한다는 제약조건으로 인해
T는 U인 BaseArray<U>의 값을 상속받고 Source.CopyTo(Array, 0)로 해당 배열을 복사한다.